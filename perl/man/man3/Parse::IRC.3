.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::IRC 3"
.TH Parse::IRC 3 "2016-10-16" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::IRC \- A parser for the IRC protocol.
.SH "VERSION"
.IX Header "VERSION"
version 1.22
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
General usage:
.PP
.Vb 2
\&  use strict;
\&  use Parse::IRC;
\&
\&  # Functional interface
\&
\&  my $hashref = parse_irc( $irc_string );
\&
\&  # OO interface
\&
\&  my $irc_parser = Parse::IRC\->new();
\&
\&  my $hashref = $irc_parser\->parse( $irc_string );
.Ve
.PP
Using Parse::IRC in a simple \s-1IRC\s0 bot:
.PP
.Vb 1
\&  # A simple IRC bot using Parse::IRC
\&
\&  use strict;
\&  use IO::Socket;
\&  use Parse::IRC;
\&
\&  my $parser = Parse::IRC\->new( public => 1 );
\&
\&  my %dispatch = ( \*(Aqping\*(Aq => \e&irc_ping, \*(Aq001\*(Aq => \e&irc_001, \*(Aqpublic\*(Aq => \e&irc_public );
\&
\&  # The server to connect to and our details.
\&  my $server = "irc.perl.moo";
\&  my $nick = "parseirc$$";
\&  my $login = "simple_bot";
\&
\&  # The channel which the bot will join.
\&  my $channel = "#IRC.pm";
\&
\&  # Connect to the IRC server.
\&  my $sock = new IO::Socket::INET(PeerAddr => $server,
\&                                  PeerPort => 6667,
\&                                  Proto => \*(Aqtcp\*(Aq) or
\&                                    die "Can\*(Aqt connect\en";
\&
\&  # Log on to the server.
\&  print $sock "NICK $nick\er\en";
\&  print $sock "USER $login 8 * :Perl IRC Hacks Robot\er\en";
\&
\&  # Keep reading lines from the server.
\&  while (my $input = <$sock>) {
\&    $input =~ s/\er\en//g;
\&    my $hashref = $parser\->parse( $input );
\&    SWITCH: {
\&          my $type = lc $hashref\->{command};
\&          my @args;
\&          push @args, $hashref\->{prefix} if $hashref\->{prefix};
\&          push @args, @{ $hashref\->{params} };
\&          if ( defined $dispatch{$type} ) {
\&            $dispatch{$type}\->(@args);
\&            last SWITCH;
\&          }
\&          print STDOUT join( \*(Aq \*(Aq, "irc_$type:", @args ), "\en";
\&    }
\&  }
\&
\&  sub irc_ping {
\&    my $server = shift;
\&    print $sock "PONG :$server\er\en";
\&    return 1;
\&  }
\&
\&  sub irc_001 {
\&    print STDOUT "Connected to $_[0]\en";
\&    print $sock "JOIN $channel\er\en";
\&    return 1;
\&  }
\&
\&  sub irc_public {
\&    my ($who,$where,$what) = @_;
\&    print "$who \-> $where \-> $what\en";
\&    return 1;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parse::IRC provides a convenient way of parsing lines of text conforming to the \s-1IRC\s0
protocol ( see \s-1RFC1459\s0 or \s-1RFC2812\s0 ).
.SH "FUNCTION INTERFACE"
.IX Header "FUNCTION INTERFACE"
Using the module automagically imports 'parse_irc' into your namespace.
.ie n .IP """parse_irc""" 4
.el .IP "\f(CWparse_irc\fR" 4
.IX Item "parse_irc"
Takes a string of \s-1IRC\s0 protcol text. Returns a hashref on success or undef on failure.
See below for the format of the hashref returned.
.SH "OBJECT INTERFACE"
.IX Header "OBJECT INTERFACE"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.ie n .IP """new""" 4
.el .IP "\f(CWnew\fR" 4
.IX Item "new"
Creates a new Parse::IRC object. One may specify \f(CW\*(C`debug => 1\*(C'\fR to enable warnings about non-IRC
protcol lines. Specify \f(CW\*(C`public => 1\*(C'\fR to enable the automatic conversion of privmsgs targeted at
channels to \f(CW\*(C`public\*(C'\fR instead of \f(CW\*(C`privmsg\*(C'\fR. Specify \f(CW\*(C`ctcp => 1\*(C'\fR to enable automatic conversion
of privmsgs and notices with \s-1CTCP/DCC\s0 type encoding to \f(CW\*(C`ctcp\*(C'\fR, \f(CW\*(C`ctcpreply\*(C'\fR and \f(CW\*(C`dcc_request\*(C'\fR.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP """parse""" 4
.el .IP "\f(CWparse\fR" 4
.IX Item "parse"
Takes a string of \s-1IRC\s0 protcol text. Returns a hashref on success or undef on failure.
The hashref contains the following fields:
.Sp
.Vb 4
\&  prefix
\&  command
\&  params ( this is an arrayref )
\&  raw_line
.Ve
.Sp
For example, if the filter receives the following line, the following hashref is produced:
.Sp
.Vb 1
\&  LINE: \*(Aq:moo.server.net 001 lamebot :Welcome to the IRC network lamebot\*(Aq
\&
\&  HASHREF: {
\&             prefix   => \*(Aq:moo.server.net\*(Aq,
\&             command  => \*(Aq001\*(Aq,
\&             params   => [ \*(Aqlamebot\*(Aq, \*(AqWelcome to the IRC network lamebot\*(Aq ],
\&             raw_line => \*(Aq:moo.server.net 001 lamebot :Welcome to the IRC network lamebot\*(Aq,
\&           }
.Ve
.SH "KUDOS"
.IX Header "KUDOS"
Based on code originally developed by Jonathan Steinert and Dennis Taylor
.SH "SEE ALSO"
.IX Header "SEE ALSO"
POE::Filter::IRCD
.PP
<http://www.faqs.org/rfcs/rfc1459.html>
.PP
<http://www.faqs.org/rfcs/rfc2812.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Williams <chris@bingosnet.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Chris Williams, Jonathan Steinert and Dennis Taylor.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
