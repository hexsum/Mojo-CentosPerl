.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious 3"
.TH Mojolicious 3 "2016-10-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious \- Real\-time web framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Application
\&  package MyApp;
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&  # Route
\&  sub startup {
\&    my $self = shift;
\&    $self\->routes\->get(\*(Aq/hello\*(Aq)\->to(\*(Aqfoo#hello\*(Aq);
\&  }
\&
\&  # Controller
\&  package MyApp::Controller::Foo;
\&  use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&  # Action
\&  sub hello {
\&    my $self = shift;
\&    $self\->render(text => \*(AqHello World!\*(Aq);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An amazing real-time web framework built on top of the powerful Mojo web
development toolkit. With support for RESTful routes, plugins, commands,
Perl-ish templates, content negotiation, session management, form validation,
testing framework, static file server, \f(CW\*(C`CGI\*(C'\fR/\f(CW\*(C`PSGI\*(C'\fR detection, first class
Unicode support and much more for you to discover.
.PP
Take a look at our excellent documentation in Mojolicious::Guides!
.SH "HOOKS"
.IX Header "HOOKS"
Mojolicious will emit the following hooks in the listed order.
.SS "after_build_tx"
.IX Subsection "after_build_tx"
Emitted right after the transaction is built and before the \s-1HTTP\s0 request gets
parsed.
.PP
.Vb 4
\&  $app\->hook(after_build_tx => sub {
\&    my ($tx, $app) = @_;
\&    ...
\&  });
.Ve
.PP
This is a very powerful hook and should not be used lightly, it makes some
rather advanced features such as upload progress bars possible. Note that this
hook will not work for embedded applications, because only the host application
gets to build transactions. (Passed the transaction and application object)
.SS "around_dispatch"
.IX Subsection "around_dispatch"
Emitted right after a new request has been received and wraps around the whole
dispatch process, so you have to manually forward to the next hook if you want
to continue the chain. Default exception handling with
\&\*(L"reply\->exception\*(R" in Mojolicious::Plugin::DefaultHelpers is the first hook
in the chain and a call to \*(L"dispatch\*(R" the last, yours will be in between.
.PP
.Vb 6
\&  $app\->hook(around_dispatch => sub {
\&    my ($next, $c) = @_;
\&    ...
\&    $next\->();
\&    ...
\&  });
.Ve
.PP
This is a very powerful hook and should not be used lightly, it allows you to,
for example, customize application-wide exception handling, consider it the
sledgehammer in your toolbox. (Passed a callback leading to the next hook and
the default controller object)
.SS "before_dispatch"
.IX Subsection "before_dispatch"
Emitted right before the static file server and router start their work.
.PP
.Vb 4
\&  $app\->hook(before_dispatch => sub {
\&    my $c = shift;
\&    ...
\&  });
.Ve
.PP
Very useful for rewriting incoming requests and other preprocessing tasks.
(Passed the default controller object)
.SS "after_static"
.IX Subsection "after_static"
Emitted after a static file response has been generated by the static file
server.
.PP
.Vb 4
\&  $app\->hook(after_static => sub {
\&    my $c = shift;
\&    ...
\&  });
.Ve
.PP
Mostly used for post-processing static file responses. (Passed the default
controller object)
.SS "before_routes"
.IX Subsection "before_routes"
Emitted after the static file server determined if a static file should be
served and before the router starts its work.
.PP
.Vb 4
\&  $app\->hook(before_routes => sub {
\&    my $c = shift;
\&    ...
\&  });
.Ve
.PP
Mostly used for custom dispatchers and collecting metrics. (Passed the default
controller object)
.SS "around_action"
.IX Subsection "around_action"
Emitted right before an action gets executed and wraps around it, so you have to
manually forward to the next hook if you want to continue the chain. Default
action dispatching is the last hook in the chain, yours will run before it.
.PP
.Vb 5
\&  $app\->hook(around_action => sub {
\&    my ($next, $c, $action, $last) = @_;
\&    ...
\&    return $next\->();
\&  });
.Ve
.PP
This is a very powerful hook and should not be used lightly, it allows you for
example to pass additional arguments to actions or handle return values
differently. (Passed a callback leading to the next hook, the current
controller object, the action callback and a flag indicating if this action is
an endpoint)
.SS "before_render"
.IX Subsection "before_render"
Emitted before content is generated by the renderer. Note that this hook can
trigger out of order due to its dynamic nature, and with embedded applications
will only work for the application that is rendering.
.PP
.Vb 4
\&  $app\->hook(before_render => sub {
\&    my ($c, $args) = @_;
\&    ...
\&  });
.Ve
.PP
Mostly used for pre-processing arguments passed to the renderer. (Passed the
current controller object and the render arguments)
.SS "after_render"
.IX Subsection "after_render"
Emitted after content has been generated by the renderer that will be assigned
to the response. Note that this hook can trigger out of order due to its
dynamic nature, and with embedded applications will only work for the
application that is rendering.
.PP
.Vb 4
\&  $app\->hook(after_render => sub {
\&    my ($c, $output, $format) = @_;
\&    ...
\&  });
.Ve
.PP
Mostly used for post-processing dynamically generated content. (Passed the
current controller object, a reference to the content and the format)
.SS "after_dispatch"
.IX Subsection "after_dispatch"
Emitted in reverse order after a response has been generated. Note that this
hook can trigger out of order due to its dynamic nature, and with embedded
applications will only work for the application that is generating the response.
.PP
.Vb 4
\&  $app\->hook(after_dispatch => sub {
\&    my $c = shift;
\&    ...
\&  });
.Ve
.PP
Useful for rewriting outgoing responses and other post-processing tasks.
(Passed the current controller object)
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious inherits all attributes from Mojo and implements the
following new ones.
.SS "commands"
.IX Subsection "commands"
.Vb 2
\&  my $commands = $app\->commands;
\&  $app         = $app\->commands(Mojolicious::Commands\->new);
.Ve
.PP
Command line interface for your application, defaults to a
Mojolicious::Commands object.
.PP
.Vb 2
\&  # Add another namespace to load commands from
\&  push @{$app\->commands\->namespaces}, \*(AqMyApp::Command\*(Aq;
.Ve
.SS "controller_class"
.IX Subsection "controller_class"
.Vb 2
\&  my $class = $app\->controller_class;
\&  $app      = $app\->controller_class(\*(AqMojolicious::Controller\*(Aq);
.Ve
.PP
Class to be used for the default controller, defaults to
Mojolicious::Controller. Note that this class needs to have already been
loaded before the first request arrives.
.SS "mode"
.IX Subsection "mode"
.Vb 2
\&  my $mode = $app\->mode;
\&  $app     = $app\->mode(\*(Aqproduction\*(Aq);
.Ve
.PP
The operating mode for your application, defaults to a value from the
\&\f(CW\*(C`MOJO_MODE\*(C'\fR and \f(CW\*(C`PLACK_ENV\*(C'\fR environment variables or \f(CW\*(C`development\*(C'\fR. Right
before calling \*(L"startup\*(R", Mojolicious will pick up the current mode,
name the log file after it and raise the log level from \f(CW\*(C`debug\*(C'\fR to \f(CW\*(C`info\*(C'\fR if
it has a value other than \f(CW\*(C`development\*(C'\fR.
.SS "moniker"
.IX Subsection "moniker"
.Vb 2
\&  my $moniker = $app\->moniker;
\&  $app        = $app\->moniker(\*(Aqfoo_bar\*(Aq);
.Ve
.PP
Moniker of this application, often used as default filename for configuration
files and the like, defaults to decamelizing the application class with
\&\*(L"decamelize\*(R" in Mojo::Util.
.SS "plugins"
.IX Subsection "plugins"
.Vb 2
\&  my $plugins = $app\->plugins;
\&  $app        = $app\->plugins(Mojolicious::Plugins\->new);
.Ve
.PP
The plugin manager, defaults to a Mojolicious::Plugins object. See the
\&\*(L"plugin\*(R" method below if you want to load a plugin.
.PP
.Vb 2
\&  # Add another namespace to load plugins from
\&  push @{$app\->plugins\->namespaces}, \*(AqMyApp::Plugin\*(Aq;
.Ve
.SS "renderer"
.IX Subsection "renderer"
.Vb 2
\&  my $renderer = $app\->renderer;
\&  $app         = $app\->renderer(Mojolicious::Renderer\->new);
.Ve
.PP
Used to render content, defaults to a Mojolicious::Renderer object. For more
information about how to generate content see
Mojolicious::Guides::Rendering.
.PP
.Vb 2
\&  # Add another "templates" directory
\&  push @{$app\->renderer\->paths}, \*(Aq/home/sri/templates\*(Aq;
\&
\&  # Add another "templates" directory with higher precedence
\&  unshift @{$app\->renderer\->paths}, \*(Aq/home/sri/themes/blue/templates\*(Aq;
\&
\&  # Add another class with templates in DATA section
\&  push @{$app\->renderer\->classes}, \*(AqMojolicious::Plugin::Fun\*(Aq;
.Ve
.SS "routes"
.IX Subsection "routes"
.Vb 2
\&  my $routes = $app\->routes;
\&  $app       = $app\->routes(Mojolicious::Routes\->new);
.Ve
.PP
The router, defaults to a Mojolicious::Routes object. You use this in your
startup method to define the url endpoints for your application.
.PP
.Vb 4
\&  # Add routes
\&  my $r = $app\->routes;
\&  $r\->get(\*(Aq/foo/bar\*(Aq)\->to(\*(Aqtest#foo\*(Aq, title => \*(AqHello Mojo!\*(Aq);
\&  $r\->post(\*(Aq/baz\*(Aq)\->to(\*(Aqtest#baz\*(Aq);
\&
\&  # Add another namespace to load controllers from
\&  push @{$app\->routes\->namespaces}, \*(AqMyApp::MyController\*(Aq;
.Ve
.SS "secrets"
.IX Subsection "secrets"
.Vb 2
\&  my $secrets = $app\->secrets;
\&  $app        = $app\->secrets([$bytes]);
.Ve
.PP
Secret passphrases used for signed cookies and the like, defaults to the
\&\*(L"moniker\*(R" of this application, which is not very secure, so you should
change it!!! As long as you are using the insecure default there will be debug
messages in the log file reminding you to change your passphrase. Only the
first passphrase is used to create new signatures, but all of them for
verification. So you can increase security without invalidating all your
existing signed cookies by rotating passphrases, just add new ones to the front
and remove old ones from the back.
.PP
.Vb 2
\&  # Rotate passphrases
\&  $app\->secrets([\*(Aqnew_passw0rd\*(Aq, \*(Aqold_passw0rd\*(Aq, \*(Aqvery_old_passw0rd\*(Aq]);
.Ve
.SS "sessions"
.IX Subsection "sessions"
.Vb 2
\&  my $sessions = $app\->sessions;
\&  $app         = $app\->sessions(Mojolicious::Sessions\->new);
.Ve
.PP
Signed cookie based session manager, defaults to a Mojolicious::Sessions
object. You can usually leave this alone, see
\&\*(L"session\*(R" in Mojolicious::Controller for more information about working with
session data.
.PP
.Vb 2
\&  # Change name of cookie used for all sessions
\&  $app\->sessions\->cookie_name(\*(Aqmysession\*(Aq);
.Ve
.SS "static"
.IX Subsection "static"
.Vb 2
\&  my $static = $app\->static;
\&  $app       = $app\->static(Mojolicious::Static\->new);
.Ve
.PP
For serving static files from your \f(CW\*(C`public\*(C'\fR directories, defaults to a
Mojolicious::Static object.
.PP
.Vb 2
\&  # Add another "public" directory
\&  push @{$app\->static\->paths}, \*(Aq/home/sri/public\*(Aq;
\&
\&  # Add another "public" directory with higher precedence
\&  unshift @{$app\->static\->paths}, \*(Aq/home/sri/themes/blue/public\*(Aq;
\&
\&  # Add another class with static files in DATA section
\&  push @{$app\->static\->classes}, \*(AqMojolicious::Plugin::Fun\*(Aq;
.Ve
.SS "types"
.IX Subsection "types"
.Vb 2
\&  my $types = $app\->types;
\&  $app      = $app\->types(Mojolicious::Types\->new);
.Ve
.PP
Responsible for connecting file extensions with \s-1MIME\s0 types, defaults to a
Mojolicious::Types object.
.PP
.Vb 2
\&  # Add custom MIME type
\&  $app\->types\->type(twt => \*(Aqtext/tweet\*(Aq);
.Ve
.SS "validator"
.IX Subsection "validator"
.Vb 2
\&  my $validator = $app\->validator;
\&  $app          = $app\->validator(Mojolicious::Validator\->new);
.Ve
.PP
Validate values, defaults to a Mojolicious::Validator object.
.PP
.Vb 5
\&  # Add validation check
\&  $app\->validator\->add_check(foo => sub {
\&    my ($validation, $name, $value) = @_;
\&    return $value ne \*(Aqfoo\*(Aq;
\&  });
\&
\&  # Add validation filter
\&  $app\->validator\->add_filter(quotemeta => sub {
\&    my ($validation, $name, $value) = @_;
\&    return quotemeta $value;
\&  });
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious inherits all methods from Mojo and implements the following
new ones.
.SS "build_controller"
.IX Subsection "build_controller"
.Vb 3
\&  my $c = $app\->build_controller;
\&  my $c = $app\->build_controller(Mojo::Transaction::HTTP\->new);
\&  my $c = $app\->build_controller(Mojolicious::Controller\->new);
.Ve
.PP
Build default controller object with \*(L"controller_class\*(R".
.PP
.Vb 2
\&  # Render template from application
\&  my $foo = $app\->build_controller\->render_to_string(template => \*(Aqfoo\*(Aq);
.Ve
.SS "build_tx"
.IX Subsection "build_tx"
.Vb 1
\&  my $tx = $app\->build_tx;
.Ve
.PP
Build Mojo::Transaction::HTTP object and emit \*(L"after_build_tx\*(R" hook.
.SS "defaults"
.IX Subsection "defaults"
.Vb 4
\&  my $hash = $app\->defaults;
\&  my $foo  = $app\->defaults(\*(Aqfoo\*(Aq);
\&  $app     = $app\->defaults({foo => \*(Aqbar\*(Aq, baz => 23});
\&  $app     = $app\->defaults(foo => \*(Aqbar\*(Aq, baz => 23);
.Ve
.PP
Default values for \*(L"stash\*(R" in Mojolicious::Controller, assigned for every new
request.
.PP
.Vb 2
\&  # Remove value
\&  my $foo = delete $app\->defaults\->{foo};
\&
\&  # Assign multiple values at once
\&  $app\->defaults(foo => \*(Aqtest\*(Aq, bar => 23);
.Ve
.SS "dispatch"
.IX Subsection "dispatch"
.Vb 1
\&  $app\->dispatch(Mojolicious::Controller\->new);
.Ve
.PP
The heart of every Mojolicious application, calls the \*(L"static\*(R" and
\&\*(L"routes\*(R" dispatchers for every request and passes them a
Mojolicious::Controller object.
.SS "handler"
.IX Subsection "handler"
.Vb 2
\&  $app\->handler(Mojo::Transaction::HTTP\->new);
\&  $app\->handler(Mojolicious::Controller\->new);
.Ve
.PP
Sets up the default controller and emits the \*(L"around_dispatch\*(R" hook for
every request.
.SS "helper"
.IX Subsection "helper"
.Vb 1
\&  $app\->helper(foo => sub {...});
.Ve
.PP
Add or replace a helper that will be available as a method of the controller
object and the application object, as well as a function in \f(CW\*(C`ep\*(C'\fR templates. For
a full list of helpers that are available by default see
Mojolicious::Plugin::DefaultHelpers and Mojolicious::Plugin::TagHelpers.
.PP
.Vb 2
\&  # Helper
\&  $app\->helper(cache => sub { state $cache = {} });
\&
\&  # Application
\&  $app\->cache\->{foo} = \*(Aqbar\*(Aq;
\&  my $result = $app\->cache\->{foo};
\&
\&  # Controller
\&  $c\->cache\->{foo} = \*(Aqbar\*(Aq;
\&  my $result = $c\->cache\->{foo};
\&
\&  # Template
\&  % cache\->{foo} = \*(Aqbar\*(Aq;
\&  %= cache\->{foo}
.Ve
.SS "hook"
.IX Subsection "hook"
.Vb 1
\&  $app\->hook(after_dispatch => sub {...});
.Ve
.PP
Extend Mojolicious with hooks, which allow code to be shared with all
requests indiscriminately, for a full list of available hooks see \*(L"\s-1HOOKS\s0\*(R".
.PP
.Vb 6
\&  # Dispatchers will not run if there\*(Aqs already a response code defined
\&  $app\->hook(before_dispatch => sub {
\&    my $c = shift;
\&    $c\->render(text => \*(AqSkipped static file server and router!\*(Aq)
\&      if $c\->req\->url\->path\->to_route =~ /do_not_dispatch/;
\&  });
.Ve
.SS "new"
.IX Subsection "new"
.Vb 3
\&  my $app = Mojolicious\->new;
\&  my $app = Mojolicious\->new(moniker => \*(Aqfoo_bar\*(Aq);
\&  my $app = Mojolicious\->new({moniker => \*(Aqfoo_bar\*(Aq});
.Ve
.PP
Construct a new Mojolicious application and call \*(L"startup\*(R". Will
automatically detect your home directory and set up logging based on your
current operating mode. Also sets up the renderer, static file server, a
default set of plugins and an \*(L"around_dispatch\*(R" hook with the default
exception handling.
.SS "plugin"
.IX Subsection "plugin"
.Vb 9
\&  $app\->plugin(\*(Aqsome_thing\*(Aq);
\&  $app\->plugin(\*(Aqsome_thing\*(Aq, foo => 23);
\&  $app\->plugin(\*(Aqsome_thing\*(Aq, {foo => 23});
\&  $app\->plugin(\*(AqSomeThing\*(Aq);
\&  $app\->plugin(\*(AqSomeThing\*(Aq, foo => 23);
\&  $app\->plugin(\*(AqSomeThing\*(Aq, {foo => 23});
\&  $app\->plugin(\*(AqMyApp::Plugin::SomeThing\*(Aq);
\&  $app\->plugin(\*(AqMyApp::Plugin::SomeThing\*(Aq, foo => 23);
\&  $app\->plugin(\*(AqMyApp::Plugin::SomeThing\*(Aq, {foo => 23});
.Ve
.PP
Load a plugin, for a full list of example plugins included in the
Mojolicious distribution see \*(L"\s-1PLUGINS\s0\*(R" in Mojolicious::Plugins.
.SS "start"
.IX Subsection "start"
.Vb 2
\&  $app\->start;
\&  $app\->start(@ARGV);
.Ve
.PP
Start the command line interface for your application. For a full list of
commands that are available by default see \*(L"\s-1COMMANDS\s0\*(R" in Mojolicious::Commands.
Note that the options \f(CW\*(C`\-h\*(C'\fR/\f(CW\*(C`\-\-help\*(C'\fR, \f(CW\*(C`\-\-home\*(C'\fR and \f(CW\*(C`\-m\*(C'\fR/\f(CW\*(C`\-\-mode\*(C'\fR, which are
shared by all commands, will be parsed from \f(CW@ARGV\fR during compile time.
.PP
.Vb 2
\&  # Always start daemon
\&  $app\->start(\*(Aqdaemon\*(Aq, \*(Aq\-l\*(Aq, \*(Aqhttp://*:8080\*(Aq);
.Ve
.SS "startup"
.IX Subsection "startup"
.Vb 1
\&  $app\->startup;
.Ve
.PP
This is your main hook into the application, it will be called at application
startup. Meant to be overloaded in a subclass.
.PP
.Vb 4
\&  sub startup {
\&    my $self = shift;
\&    ...
\&  }
.Ve
.SH "AUTOLOAD"
.IX Header "AUTOLOAD"
In addition to the \*(L"\s-1ATTRIBUTES\s0\*(R" and \*(L"\s-1METHODS\s0\*(R" above you can also call
helpers on Mojolicious objects. This includes all helpers from
Mojolicious::Plugin::DefaultHelpers and Mojolicious::Plugin::TagHelpers.
Note that application helpers are always called with a new default controller
object, so they can't depend on or change controller state, which includes
request, response and stash.
.PP
.Vb 2
\&  # Call helper
\&  say $app\->dumper({foo => \*(Aqbar\*(Aq});
\&
\&  # Longer version
\&  say $app\->build_controller\->helpers\->dumper({foo => \*(Aqbar\*(Aq});
.Ve
.SH "BUNDLED FILES"
.IX Header "BUNDLED FILES"
The Mojolicious distribution includes a few files with different licenses
that have been bundled for internal use.
.SS "Mojolicious Artwork"
.IX Subsection "Mojolicious Artwork"
.Vb 1
\&  Copyright (C) 2010\-2016, Sebastian Riedel.
.Ve
.PP
Licensed under the CC-SA License, Version 4.0
http://creativecommons.org/licenses/by\-sa/4.0 <http://creativecommons.org/licenses/by-sa/4.0>.
.SS "jQuery"
.IX Subsection "jQuery"
.Vb 1
\&  Copyright (C) jQuery Foundation.
.Ve
.PP
Licensed under the \s-1MIT\s0 License, <http://creativecommons.org/licenses/MIT>.
.SS "prettify.js"
.IX Subsection "prettify.js"
.Vb 1
\&  Copyright (C) 2006, 2013 Google Inc..
.Ve
.PP
Licensed under the Apache License, Version 2.0
http://www.apache.org/licenses/LICENSE\-2.0 <http://www.apache.org/licenses/LICENSE-2.0>.
.SH "CODE NAMES"
.IX Header "CODE NAMES"
Every major release of Mojolicious has a code name, these are the ones that
have been used in the past.
.PP
7.0, \f(CW\*(C`Doughnut\*(C'\fR (U+1F369)
.PP
6.0, \f(CW\*(C`Clinking Beer Mugs\*(C'\fR (U+1F37B)
.PP
5.0, \f(CW\*(C`Tiger Face\*(C'\fR (U+1F42F)
.PP
4.0, \f(CW\*(C`Top Hat\*(C'\fR (U+1F3A9)
.PP
3.0, \f(CW\*(C`Rainbow\*(C'\fR (U+1F308)
.PP
2.0, \f(CW\*(C`Leaf Fluttering In Wind\*(C'\fR (U+1F343)
.PP
1.4, \f(CW\*(C`Smiling Face With Sunglasses\*(C'\fR (U+1F60E)
.PP
1.3, \f(CW\*(C`Tropical Drink\*(C'\fR (U+1F379)
.PP
1.1, \f(CW\*(C`Smiling Cat Face With Heart\-Shaped Eyes\*(C'\fR (U+1F63B)
.PP
1.0, \f(CW\*(C`Snowflake\*(C'\fR (U+2744)
.SH "SPONSORS"
.IX Header "SPONSORS"
Some of the work on this distribution has been sponsored by
The Perl Foundation <http://www.perlfoundation.org>, thank you!
.SH "PROJECT FOUNDER"
.IX Header "PROJECT FOUNDER"
Sebastian Riedel, \f(CW\*(C`sri@cpan.org\*(C'\fR
.SH "CORE DEVELOPERS"
.IX Header "CORE DEVELOPERS"
Current members of the core team in alphabetical order:
.Sp
.RS 2
Abhijit Menon-Sen, \f(CW\*(C`ams@cpan.org\*(C'\fR
.Sp
Glen Hinkle, \f(CW\*(C`tempire@cpan.org\*(C'\fR
.Sp
Jan Henning Thorsen, \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
.Sp
Joel Berger, \f(CW\*(C`jberger@cpan.org\*(C'\fR
.Sp
Marcus Ramberg, \f(CW\*(C`mramberg@cpan.org\*(C'\fR
.RE
.SH "CREDITS"
.IX Header "CREDITS"
In alphabetical order:
.Sp
.RS 2
Adam Kennedy
.Sp
Adriano Ferreira
.Sp
Al Newkirk
.Sp
Alex Efros
.Sp
Alex Salimon
.Sp
Alexey Likhatskiy
.Sp
Anatoly Sharifulin
.Sp
Andre Parker
.Sp
Andre Vieth
.Sp
Andreas Jaekel
.Sp
Andreas Koenig
.Sp
Andrew Fresh
.Sp
Andrew Nugged
.Sp
Andrey Khozov
.Sp
Andrey Kuzmin
.Sp
Andy Grundman
.Sp
Aristotle Pagaltzis
.Sp
Ashley Dev
.Sp
Ask Bjoern Hansen
.Sp
Audrey Tang
.Sp
Ben Tyler
.Sp
Ben van Staveren
.Sp
Benjamin Erhart
.Sp
Bernhard Graf
.Sp
Breno G. de Oliveira
.Sp
Brian Duggan
.Sp
Brian Medley
.Sp
Burak Gursoy
.Sp
Ch Lamprecht
.Sp
Charlie Brady
.Sp
Chas. J. Owens \s-1IV\s0
.Sp
Christian Hansen
.Sp
chromatic
.Sp
Curt Tilmes
.Sp
Dan Book
.Sp
Daniel Kimsey
.Sp
Danijel Tasov
.Sp
Danny Thomas
.Sp
David Davis
.Sp
David Webb
.Sp
Diego Kuperman
.Sp
Dmitriy Shalashov
.Sp
Dmitry Konstantinov
.Sp
Dominik Jarmulowicz
.Sp
Dominique Dumont
.Sp
Douglas Christopher Wilson
.Sp
Eugen Konkov
.Sp
Eugene Toropov
.Sp
Gisle Aas
.Sp
Graham Barr
.Sp
Graham Knop
.Sp
Henry Tang
.Sp
Hideki Yamamura
.Sp
Hiroki Toyokawa
.Sp
Ian Goodacre
.Sp
Ilya Chesnokov
.Sp
James Duncan
.Sp
Jan Jona Javorsek
.Sp
Jan Schmidt
.Sp
Jaroslav Muhin
.Sp
Jesse Vincent
.Sp
Johannes Plunien
.Sp
John Kingsley
.Sp
Jonathan Yu
.Sp
Josh Leder
.Sp
Kazuhiro Shibuya
.Sp
Kevin Old
.Sp
Kitamura Akatsuki
.Sp
Klaus S. Madsen
.Sp
Lars Balker Rasmussen
.Sp
Lee Johnson
.Sp
Leon Brocard
.Sp
Magnus Holm
.Sp
Maik Fischer
.Sp
Mark Fowler
.Sp
Mark Grimes
.Sp
Mark Stosberg
.Sp
Marty Tennison
.Sp
Matt S Trout
.Sp
Matthew Lineen
.Sp
Maksym Komar
.Sp
Maxim Vuets
.Sp
Michael Gregorowicz
.Sp
Michael Harris
.Sp
Mike Magowan
.Sp
Mirko Westermeier
.Sp
Mons Anderson
.Sp
Moritz Lenz
.Sp
Neil Watkiss
.Sp
Nic Sandfield
.Sp
Nils Diewald
.Sp
Oleg Zhelo
.Sp
Olivier Mengue
.Sp
Pascal Gaudette
.Sp
Paul Evans
.Sp
Paul Tomlin
.Sp
Pavel Shaydo
.Sp
Pedro Melo
.Sp
Peter Edwards
.Sp
Pierre-Yves Ritschard
.Sp
Piotr Roszatycki
.Sp
Quentin Carbonneaux
.Sp
Rafal Pocztarski
.Sp
Randal Schwartz
.Sp
Richard Elberger
.Sp
Rick Delaney
.Sp
Robert Hicks
.Sp
Robin Lee
.Sp
Roland Lammel
.Sp
Roy Storey
.Sp
Ryan Jendoubi
.Sp
Sascha Kiefer
.Sp
Scott Wiersdorf
.Sp
Sergey Zasenko
.Sp
Simon Bertrang
.Sp
Simone Tampieri
.Sp
Shu Cho
.Sp
Skye Shaw
.Sp
Stanis Trendelenburg
.Sp
Steffen Ullrich
.Sp
Stephane Este-Gracias
.Sp
Steve Atkins
.Sp
Tatsuhiko Miyagawa
.Sp
Terrence Brannon
.Sp
Tianon Gravi
.Sp
Tomas Znamenacek
.Sp
Ulrich Habel
.Sp
Ulrich Kautz
.Sp
Uwe Voelker
.Sp
Viacheslav Tykhanovskyi
.Sp
Victor Engmark
.Sp
Viliam Pucik
.Sp
Wes Cravens
.Sp
Yaroslav Korshak
.Sp
Yuki Kimoto
.Sp
Zak B. Elep
.Sp
Zoffix Znet
.RE
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2016, Sebastian Riedel and others.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<https://github.com/kraih/mojo>, Mojolicious::Guides,
<http://mojolicious.org>.
