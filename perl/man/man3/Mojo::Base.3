.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::Base 3"
.TH Mojo::Base 3 "2016-07-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Base \- Minimal base class for Mojo projects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Cat;
\&  use Mojo::Base \-base;
\&
\&  has name => \*(AqNyan\*(Aq;
\&  has [\*(Aqage\*(Aq, \*(Aqweight\*(Aq] => 4;
\&
\&  package Tiger;
\&  use Mojo::Base \*(AqCat\*(Aq;
\&
\&  has friend  => sub { Cat\->new };
\&  has stripes => 42;
\&
\&  package main;
\&  use Mojo::Base \-strict;
\&
\&  my $mew = Cat\->new(name => \*(AqLongcat\*(Aq);
\&  say $mew\->age;
\&  say $mew\->age(3)\->weight(5)\->age;
\&
\&  my $rawr = Tiger\->new(stripes => 38, weight => 250);
\&  say $rawr\->tap(sub { $_\->friend\->name(\*(AqTacgnol\*(Aq) })\->weight;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Base is a simple base class for Mojo projects with fluent
interfaces.
.PP
.Vb 4
\&  # Automatically enables "strict", "warnings", "utf8" and Perl 5.10 features
\&  use Mojo::Base \-strict;
\&  use Mojo::Base \-base;
\&  use Mojo::Base \*(AqSomeBaseClass\*(Aq;
.Ve
.PP
All three forms save a lot of typing.
.PP
.Vb 6
\&  # use Mojo::Base \-strict;
\&  use strict;
\&  use warnings;
\&  use utf8;
\&  use feature \*(Aq:5.10\*(Aq;
\&  use IO::Handle ();
\&
\&  # use Mojo::Base \-base;
\&  use strict;
\&  use warnings;
\&  use utf8;
\&  use feature \*(Aq:5.10\*(Aq;
\&  use IO::Handle ();
\&  use Mojo::Base;
\&  push @ISA, \*(AqMojo::Base\*(Aq;
\&  sub has { Mojo::Base::attr(_\|_PACKAGE_\|_, @_) }
\&
\&  # use Mojo::Base \*(AqSomeBaseClass\*(Aq;
\&  use strict;
\&  use warnings;
\&  use utf8;
\&  use feature \*(Aq:5.10\*(Aq;
\&  use IO::Handle ();
\&  require SomeBaseClass;
\&  push @ISA, \*(AqSomeBaseClass\*(Aq;
\&  use Mojo::Base;
\&  sub has { Mojo::Base::attr(_\|_PACKAGE_\|_, @_) }
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Mojo::Base implements the following functions, which can be imported with
the \f(CW\*(C`\-base\*(C'\fR flag or by setting a base class.
.SS "has"
.IX Subsection "has"
.Vb 6
\&  has \*(Aqname\*(Aq;
\&  has [\*(Aqname1\*(Aq, \*(Aqname2\*(Aq, \*(Aqname3\*(Aq];
\&  has name => \*(Aqfoo\*(Aq;
\&  has name => sub {...};
\&  has [\*(Aqname1\*(Aq, \*(Aqname2\*(Aq, \*(Aqname3\*(Aq] => \*(Aqfoo\*(Aq;
\&  has [\*(Aqname1\*(Aq, \*(Aqname2\*(Aq, \*(Aqname3\*(Aq] => sub {...};
.Ve
.PP
Create attributes for hash-based objects, just like the \*(L"attr\*(R" method.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Base implements the following methods.
.SS "attr"
.IX Subsection "attr"
.Vb 7
\&  $object\->attr(\*(Aqname\*(Aq);
\&  SubClass\->attr(\*(Aqname\*(Aq);
\&  SubClass\->attr([\*(Aqname1\*(Aq, \*(Aqname2\*(Aq, \*(Aqname3\*(Aq]);
\&  SubClass\->attr(name => \*(Aqfoo\*(Aq);
\&  SubClass\->attr(name => sub {...});
\&  SubClass\->attr([\*(Aqname1\*(Aq, \*(Aqname2\*(Aq, \*(Aqname3\*(Aq] => \*(Aqfoo\*(Aq);
\&  SubClass\->attr([\*(Aqname1\*(Aq, \*(Aqname2\*(Aq, \*(Aqname3\*(Aq] => sub {...});
.Ve
.PP
Create attribute accessors for hash-based objects, an array reference can be
used to create more than one at a time. Pass an optional second argument to set
a default value, it should be a constant or a callback. The callback will be
executed at accessor read time if there's no set value. Accessors can be
chained, that means they return their invocant when they are called with an
argument.
.SS "new"
.IX Subsection "new"
.Vb 3
\&  my $object = SubClass\->new;
\&  my $object = SubClass\->new(name => \*(Aqvalue\*(Aq);
\&  my $object = SubClass\->new({name => \*(Aqvalue\*(Aq});
.Ve
.PP
This base class provides a basic constructor for hash-based objects. You can
pass it either a hash or a hash reference with attribute values.
.SS "tap"
.IX Subsection "tap"
.Vb 3
\&  $object = $object\->tap(sub {...});
\&  $object = $object\->tap(\*(Aqsome_method\*(Aq);
\&  $object = $object\->tap(\*(Aqsome_method\*(Aq, @args);
.Ve
.PP
Tap into a method chain to perform operations on an object within the chain
(also known as a K combinator or Kestrel). The object will be the first argument
passed to the callback, and is also available as \f(CW$_\fR. The callback's return
value will be ignored; instead, the object (the callback's first argument) will
be the return value. In this way, arbitrary code can be used within (i.e.,
spliced or tapped into) a chained set of object method calls.
.PP
.Vb 2
\&  # Longer version
\&  $object = $object\->tap(sub { $_\->some_method(@args) });
\&
\&  # Inject side effects into a method chain
\&  $object\->foo(\*(AqA\*(Aq)\->tap(sub { say $_\->foo })\->foo(\*(AqB\*(Aq);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
