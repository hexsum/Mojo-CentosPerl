.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::IOLoop::Stream 3"
.TH Mojo::IOLoop::Stream 3 "2016-08-27" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::IOLoop::Stream \- Non\-blocking I/O stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::IOLoop::Stream;
\&
\&  # Create stream
\&  my $stream = Mojo::IOLoop::Stream\->new($handle);
\&  $stream\->on(read => sub {
\&    my ($stream, $bytes) = @_;
\&    ...
\&  });
\&  $stream\->on(close => sub {
\&    my $stream = shift;
\&    ...
\&  });
\&  $stream\->on(error => sub {
\&    my ($stream, $err) = @_;
\&    ...
\&  });
\&
\&  # Start and stop watching for new data
\&  $stream\->start;
\&  $stream\->stop;
\&
\&  # Start reactor if necessary
\&  $stream\->reactor\->start unless $stream\->reactor\->is_running;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::IOLoop::Stream is a container for I/O streams used by Mojo::IOLoop.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::IOLoop::Stream inherits all events from Mojo::EventEmitter and can
emit the following new ones.
.SS "close"
.IX Subsection "close"
.Vb 4
\&  $stream\->on(close => sub {
\&    my $stream = shift;
\&    ...
\&  });
.Ve
.PP
Emitted if the stream gets closed.
.SS "drain"
.IX Subsection "drain"
.Vb 4
\&  $stream\->on(drain => sub {
\&    my $stream = shift;
\&    ...
\&  });
.Ve
.PP
Emitted once all data has been written.
.SS "error"
.IX Subsection "error"
.Vb 4
\&  $stream\->on(error => sub {
\&    my ($stream, $err) = @_;
\&    ...
\&  });
.Ve
.PP
Emitted if an error occurs on the stream, fatal if unhandled.
.SS "read"
.IX Subsection "read"
.Vb 4
\&  $stream\->on(read => sub {
\&    my ($stream, $bytes) = @_;
\&    ...
\&  });
.Ve
.PP
Emitted if new data arrives on the stream.
.SS "timeout"
.IX Subsection "timeout"
.Vb 4
\&  $stream\->on(timeout => sub {
\&    my $stream = shift;
\&    ...
\&  });
.Ve
.PP
Emitted if the stream has been inactive for too long and will get closed
automatically.
.SS "write"
.IX Subsection "write"
.Vb 4
\&  $stream\->on(write => sub {
\&    my ($stream, $bytes) = @_;
\&    ...
\&  });
.Ve
.PP
Emitted if new data has been written to the stream.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::IOLoop::Stream implements the following attributes.
.SS "reactor"
.IX Subsection "reactor"
.Vb 2
\&  my $reactor = $stream\->reactor;
\&  $stream     = $stream\->reactor(Mojo::Reactor::Poll\->new);
.Ve
.PP
Low-level event reactor, defaults to the \f(CW\*(C`reactor\*(C'\fR attribute value of the
global Mojo::IOLoop singleton.
.SH "METHODS"
.IX Header "METHODS"
Mojo::IOLoop::Stream inherits all methods from Mojo::EventEmitter and
implements the following new ones.
.SS "close"
.IX Subsection "close"
.Vb 1
\&  $stream\->close;
.Ve
.PP
Close stream immediately.
.SS "close_gracefully"
.IX Subsection "close_gracefully"
.Vb 1
\&  $stream\->close_gracefully;
.Ve
.PP
Close stream gracefully.
.SS "handle"
.IX Subsection "handle"
.Vb 1
\&  my $handle = $stream\->handle;
.Ve
.PP
Get handle for stream, usually an IO::Socket::IP or IO::Socket::SSL
object.
.SS "is_readable"
.IX Subsection "is_readable"
.Vb 1
\&  my $bool = $stream\->is_readable;
.Ve
.PP
Quick non-blocking check if stream is readable, useful for identifying tainted
sockets.
.SS "is_writing"
.IX Subsection "is_writing"
.Vb 1
\&  my $bool = $stream\->is_writing;
.Ve
.PP
Check if stream is writing.
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $stream = Mojo::IOLoop::Stream\->new($handle);
.Ve
.PP
Construct a new Mojo::IOLoop::Stream object.
.SS "start"
.IX Subsection "start"
.Vb 1
\&  $stream\->start;
.Ve
.PP
Start or resume watching for new data on the stream.
.SS "steal_handle"
.IX Subsection "steal_handle"
.Vb 1
\&  my $handle = $stream\->steal_handle;
.Ve
.PP
Steal \*(L"handle\*(R" and prevent it from getting closed automatically.
.SS "stop"
.IX Subsection "stop"
.Vb 1
\&  $stream\->stop;
.Ve
.PP
Stop watching for new data on the stream.
.SS "timeout"
.IX Subsection "timeout"
.Vb 2
\&  my $timeout = $stream\->timeout;
\&  $stream     = $stream\->timeout(45);
.Ve
.PP
Maximum amount of time in seconds stream can be inactive before getting closed
automatically, defaults to \f(CW15\fR. Setting the value to \f(CW0\fR will allow this
stream to be inactive indefinitely.
.SS "write"
.IX Subsection "write"
.Vb 2
\&  $stream = $stream\->write($bytes);
\&  $stream = $stream\->write($bytes => sub {...});
.Ve
.PP
Write data to stream, the optional drain callback will be executed once all data
has been written.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
