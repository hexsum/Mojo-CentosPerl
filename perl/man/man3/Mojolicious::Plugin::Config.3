.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Config 3"
.TH Mojolicious::Plugin::Config 3 "2016-07-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Config \- Perl\-ish configuration plugin
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  # myapp.conf (it\*(Aqs just Perl returning a hash)
\&  {
\&    # Just a value
\&    foo => "bar",
\&
\&    # Nested data structures are fine too
\&    baz => [\*(AqX\*(Aq],
\&
\&    # You have full access to the application
\&    music_dir => app\->home\->rel_dir(\*(Aqmusic\*(Aq)
\&  };
\&
\&  # Mojolicious
\&  my $config = $app\->plugin(\*(AqConfig\*(Aq);
\&  say $config\->{foo};
\&
\&  # Mojolicious::Lite
\&  my $config = plugin \*(AqConfig\*(Aq;
\&  say $config\->{foo};
\&
\&  # foo.html.ep
\&  %= $config\->{foo}
\&
\&  # The configuration is available application\-wide
\&  my $config = app\->config;
\&  say $config\->{foo};
\&
\&  # Everything can be customized with options
\&  my $config = plugin Config => {file => \*(Aq/etc/myapp.stuff\*(Aq};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Config is a Perl-ish configuration plugin.
.PP
The application object can be accessed via \f(CW$app\fR or the \f(CW\*(C`app\*(C'\fR function,
strict, warnings, utf8 and Perl 5.10 features are
automatically enabled. A default configuration filename in the application home
directory will be generated from the value of \*(L"moniker\*(R" in Mojolicious
(\f(CW\*(C`$moniker.conf\*(C'\fR). You can extend the normal configuration file
\&\f(CW\*(C`$moniker.conf\*(C'\fR with \f(CW\*(C`mode\*(C'\fR specific ones like \f(CW\*(C`$moniker.$mode.conf\*(C'\fR, which
will be detected automatically.
.PP
The code of this plugin is a good example for learning to build new plugins,
you're welcome to fork it.
.PP
See \*(L"\s-1PLUGINS\s0\*(R" in Mojolicious::Plugins for a list of plugins that are available
by default.
.SH "OPTIONS"
.IX Header "OPTIONS"
Mojolicious::Plugin::Config supports the following options.
.SS "default"
.IX Subsection "default"
.Vb 2
\&  # Mojolicious::Lite
\&  plugin Config => {default => {foo => \*(Aqbar\*(Aq}};
.Ve
.PP
Default configuration, making configuration files optional.
.SS "ext"
.IX Subsection "ext"
.Vb 2
\&  # Mojolicious::Lite
\&  plugin Config => {ext => \*(Aqstuff\*(Aq};
.Ve
.PP
File extension for generated configuration filenames, defaults to \f(CW\*(C`conf\*(C'\fR.
.SS "file"
.IX Subsection "file"
.Vb 3
\&  # Mojolicious::Lite
\&  plugin Config => {file => \*(Aqmyapp.conf\*(Aq};
\&  plugin Config => {file => \*(Aq/etc/foo.stuff\*(Aq};
.Ve
.PP
Path to configuration file, absolute or relative to the application home
directory, defaults to the value of the \f(CW\*(C`MOJO_CONFIG\*(C'\fR environment variable or
\&\f(CW\*(C`$moniker.conf\*(C'\fR in the application home directory.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Config inherits all methods from Mojolicious::Plugin
and implements the following new ones.
.SS "load"
.IX Subsection "load"
.Vb 1
\&  $plugin\->load($file, $conf, $app);
.Ve
.PP
Loads configuration file and passes the content to \*(L"parse\*(R".
.PP
.Vb 5
\&  sub load {
\&    my ($self, $file, $conf, $app) = @_;
\&    ...
\&    return $self\->parse($content, $file, $conf, $app);
\&  }
.Ve
.SS "parse"
.IX Subsection "parse"
.Vb 1
\&  $plugin\->parse($content, $file, $conf, $app);
.Ve
.PP
Parse configuration file.
.PP
.Vb 5
\&  sub parse {
\&    my ($self, $content, $file, $conf, $app) = @_;
\&    ...
\&    return $hash;
\&  }
.Ve
.SS "register"
.IX Subsection "register"
.Vb 2
\&  my $config = $plugin\->register(Mojolicious\->new);
\&  my $config = $plugin\->register(Mojolicious\->new, {file => \*(Aq/etc/app.conf\*(Aq});
.Ve
.PP
Register plugin in Mojolicious application and merge configuration.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
