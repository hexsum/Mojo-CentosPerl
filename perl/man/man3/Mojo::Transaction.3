.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::Transaction 3"
.TH Mojo::Transaction 3 "2016-07-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Transaction \- Transaction base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Mojo::Transaction::MyTransaction;
\&  use Mojo::Base \*(AqMojo::Transaction\*(Aq;
\&
\&  sub client_read  {...}
\&  sub client_write {...}
\&  sub server_read  {...}
\&  sub server_write {...}
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Transaction is an abstract base class for transactions, like
Mojo::Transaction::HTTP and Mojo::Transaction::WebSocket.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::Transaction inherits all events from Mojo::EventEmitter and can
emit the following new ones.
.SS "connection"
.IX Subsection "connection"
.Vb 4
\&  $tx\->on(connection => sub {
\&    my ($tx, $connection) = @_;
\&    ...
\&  });
.Ve
.PP
Emitted when a connection has been assigned to transaction.
.SS "finish"
.IX Subsection "finish"
.Vb 4
\&  $tx\->on(finish => sub {
\&    my $tx = shift;
\&    ...
\&  });
.Ve
.PP
Emitted when transaction is finished.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Transaction implements the following attributes.
.SS "kept_alive"
.IX Subsection "kept_alive"
.Vb 2
\&  my $bool = $tx\->kept_alive;
\&  $tx      = $tx\->kept_alive($bool);
.Ve
.PP
Connection has been kept alive.
.SS "local_address"
.IX Subsection "local_address"
.Vb 2
\&  my $address = $tx\->local_address;
\&  $tx         = $tx\->local_address(\*(Aq127.0.0.1\*(Aq);
.Ve
.PP
Local interface address.
.SS "local_port"
.IX Subsection "local_port"
.Vb 2
\&  my $port = $tx\->local_port;
\&  $tx      = $tx\->local_port(8080);
.Ve
.PP
Local interface port.
.SS "original_remote_address"
.IX Subsection "original_remote_address"
.Vb 2
\&  my $address = $tx\->original_remote_address;
\&  $tx         = $tx\->original_remote_address(\*(Aq127.0.0.1\*(Aq);
.Ve
.PP
Remote interface address.
.SS "remote_port"
.IX Subsection "remote_port"
.Vb 2
\&  my $port = $tx\->remote_port;
\&  $tx      = $tx\->remote_port(8081);
.Ve
.PP
Remote interface port.
.SS "req"
.IX Subsection "req"
.Vb 2
\&  my $req = $tx\->req;
\&  $tx     = $tx\->req(Mojo::Message::Request\->new);
.Ve
.PP
\&\s-1HTTP\s0 request, defaults to a Mojo::Message::Request object.
.SS "res"
.IX Subsection "res"
.Vb 2
\&  my $res = $tx\->res;
\&  $tx     = $tx\->res(Mojo::Message::Response\->new);
.Ve
.PP
\&\s-1HTTP\s0 response, defaults to a Mojo::Message::Response object.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Transaction inherits all methods from Mojo::EventEmitter and
implements the following new ones.
.SS "client_read"
.IX Subsection "client_read"
.Vb 1
\&  $tx\->client_read($bytes);
.Ve
.PP
Read data client-side, used to implement user agents such as Mojo::UserAgent.
Meant to be overloaded in a subclass.
.SS "client_write"
.IX Subsection "client_write"
.Vb 1
\&  my $bytes = $tx\->client_write;
.Ve
.PP
Write data client-side, used to implement user agents such as
Mojo::UserAgent. Meant to be overloaded in a subclass.
.SS "closed"
.IX Subsection "closed"
.Vb 1
\&  $tx = $tx\->closed;
.Ve
.PP
Same as \*(L"completed\*(R", but also indicates that all transaction data has been
sent.
.SS "completed"
.IX Subsection "completed"
.Vb 1
\&  $tx = $tx\->completed;
.Ve
.PP
Low-level method to finalize transaction.
.SS "connection"
.IX Subsection "connection"
.Vb 2
\&  my $id = $tx\->connection;
\&  $tx    = $tx\->connection($id);
.Ve
.PP
Connection identifier.
.SS "error"
.IX Subsection "error"
.Vb 1
\&  my $err = $tx\->error;
.Ve
.PP
Get request or response error and return \f(CW\*(C`undef\*(C'\fR if there is no error,
commonly used together with \*(L"success\*(R".
.PP
.Vb 2
\&  # Longer version
\&  my $err = $tx\->req\->error || $tx\->res\->error;
\&
\&  # Check for different kinds of errors
\&  if (my $err = $tx\->error) {
\&    die "$err\->{code} response: $err\->{message}" if $err\->{code};
\&    die "Connection error: $err\->{message}";
\&  }
.Ve
.SS "is_finished"
.IX Subsection "is_finished"
.Vb 1
\&  my $bool = $tx\->is_finished;
.Ve
.PP
Check if transaction is finished.
.SS "is_websocket"
.IX Subsection "is_websocket"
.Vb 1
\&  my $bool = $tx\->is_websocket;
.Ve
.PP
False, this is not a Mojo::Transaction::WebSocket object.
.SS "remote_address"
.IX Subsection "remote_address"
.Vb 2
\&  my $address = $tx\->remote_address;
\&  $tx         = $tx\->remote_address(\*(Aq127.0.0.1\*(Aq);
.Ve
.PP
Same as \*(L"original_remote_address\*(R" or the last value of the
\&\f(CW\*(C`X\-Forwarded\-For\*(C'\fR header if \*(L"req\*(R" has been performed through a reverse
proxy.
.SS "server_read"
.IX Subsection "server_read"
.Vb 1
\&  $tx\->server_read($bytes);
.Ve
.PP
Read data server-side, used to implement web servers such as
Mojo::Server::Daemon. Meant to be overloaded in a subclass.
.SS "server_write"
.IX Subsection "server_write"
.Vb 1
\&  my $bytes = $tx\->server_write;
.Ve
.PP
Write data server-side, used to implement web servers such as
Mojo::Server::Daemon. Meant to be overloaded in a subclass.
.SS "success"
.IX Subsection "success"
.Vb 1
\&  my $res = $tx\->success;
.Ve
.PP
Returns the Mojo::Message::Response object from \*(L"res\*(R" if transaction was
successful or \f(CW\*(C`undef\*(C'\fR otherwise. Connection and parser errors have only a
message in \*(L"error\*(R", \f(CW400\fR and \f(CW500\fR responses also a code.
.PP
.Vb 7
\&  # Sensible exception handling
\&  if (my $res = $tx\->success) { say $res\->body }
\&  else {
\&    my $err = $tx\->error;
\&    die "$err\->{code} response: $err\->{message}" if $err\->{code};
\&    die "Connection error: $err\->{message}";
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
