.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Static 3"
.TH Mojolicious::Static 3 "2016-07-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Static \- Serve static files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Static;
\&
\&  my $static = Mojolicious::Static\->new;
\&  push @{$static\->classes}, \*(AqMyApp::Controller::Foo\*(Aq;
\&  push @{$static\->paths}, \*(Aq/home/sri/public\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Static is a static file server with \f(CW\*(C`Range\*(C'\fR,
\&\f(CW\*(C`If\-Modified\-Since\*(C'\fR and \f(CW\*(C`If\-None\-Match\*(C'\fR support, based on
\&\s-1RFC\s0 7232 <http://tools.ietf.org/html/rfc7232> and
\&\s-1RFC\s0 7233 <http://tools.ietf.org/html/rfc7233>.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Static implements the following attributes.
.SS "classes"
.IX Subsection "classes"
.Vb 2
\&  my $classes = $static\->classes;
\&  $static     = $static\->classes([\*(Aqmain\*(Aq]);
.Ve
.PP
Classes to use for finding files in \f(CW\*(C`DATA\*(C'\fR sections with Mojo::Loader,
first one has the highest precedence, defaults to \f(CW\*(C`main\*(C'\fR. Only files with
exactly one extension will be used, like \f(CW\*(C`index.html\*(C'\fR. Note that for files to
be detected, these classes need to have already been loaded and added before
\&\*(L"warmup\*(R" is called, which usually happens automatically during application
startup.
.PP
.Vb 2
\&  # Add another class with static files in DATA section
\&  push @{$static\->classes}, \*(AqMojolicious::Plugin::Fun\*(Aq;
\&
\&  # Add another class with static files in DATA section and higher precedence
\&  unshift @{$static\->classes}, \*(AqMojolicious::Plugin::MoreFun\*(Aq;
.Ve
.SS "paths"
.IX Subsection "paths"
.Vb 2
\&  my $paths = $static\->paths;
\&  $static   = $static\->paths([\*(Aq/home/sri/public\*(Aq]);
.Ve
.PP
Directories to serve static files from, first one has the highest precedence.
.PP
.Vb 2
\&  # Add another "public" directory
\&  push @{$static\->paths}, \*(Aq/home/sri/public\*(Aq;
\&
\&  # Add another "public" directory with higher precedence
\&  unshift @{$static\->paths}, \*(Aq/home/sri/themes/blue/public\*(Aq;
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Static inherits all methods from Mojo::Base and implements
the following new ones.
.SS "dispatch"
.IX Subsection "dispatch"
.Vb 1
\&  my $bool = $static\->dispatch(Mojolicious::Controller\->new);
.Ve
.PP
Serve static file for Mojolicious::Controller object.
.SS "file"
.IX Subsection "file"
.Vb 2
\&  my $asset = $static\->file(\*(Aqimages/logo.png\*(Aq);
\&  my $asset = $static\->file(\*(Aq../lib/MyApp.pm\*(Aq);
.Ve
.PP
Build Mojo::Asset::File or Mojo::Asset::Memory object for a file,
relative to \*(L"paths\*(R" or from \*(L"classes\*(R", or return \f(CW\*(C`undef\*(C'\fR if it doesn't
exist. Note that this method uses a relative path, but does not protect from
traversing to parent directories.
.PP
.Vb 1
\&  my $content = $static\->file(\*(Aqfoo/bar.html\*(Aq)\->slurp;
.Ve
.SS "is_fresh"
.IX Subsection "is_fresh"
.Vb 1
\&  my $bool = $static\->is_fresh(Mojolicious::Controller\->new, {etag => \*(Aqabc\*(Aq});
.Ve
.PP
Check freshness of request by comparing the \f(CW\*(C`If\-None\-Match\*(C'\fR and
\&\f(CW\*(C`If\-Modified\-Since\*(C'\fR request headers to the \f(CW\*(C`ETag\*(C'\fR and \f(CW\*(C`Last\-Modified\*(C'\fR
response headers.
.PP
These options are currently available:
.IP "etag" 2
.IX Item "etag"
.Vb 1
\&  etag => \*(Aqabc\*(Aq
.Ve
.Sp
Add \f(CW\*(C`ETag\*(C'\fR header before comparing.
.IP "last_modified" 2
.IX Item "last_modified"
.Vb 1
\&  last_modified => $epoch
.Ve
.Sp
Add \f(CW\*(C`Last\-Modified\*(C'\fR header before comparing.
.SS "serve"
.IX Subsection "serve"
.Vb 2
\&  my $bool = $static\->serve(Mojolicious::Controller\->new, \*(Aqimages/logo.png\*(Aq);
\&  my $bool = $static\->serve(Mojolicious::Controller\->new, \*(Aq../lib/MyApp.pm\*(Aq);
.Ve
.PP
Serve a specific file, relative to \*(L"paths\*(R" or from \*(L"classes\*(R". Note that
this method uses a relative path, but does not protect from traversing to parent
directories.
.SS "serve_asset"
.IX Subsection "serve_asset"
.Vb 1
\&  $static\->serve_asset(Mojolicious::Controller\->new, Mojo::Asset::File\->new);
.Ve
.PP
Serve a Mojo::Asset::File or Mojo::Asset::Memory object with \f(CW\*(C`Range\*(C'\fR,
\&\f(CW\*(C`If\-Modified\-Since\*(C'\fR and \f(CW\*(C`If\-None\-Match\*(C'\fR support.
.SS "warmup"
.IX Subsection "warmup"
.Vb 1
\&  $static\->warmup;
.Ve
.PP
Prepare static files from \*(L"classes\*(R" for future use.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
