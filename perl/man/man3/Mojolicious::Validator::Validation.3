.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Validator::Validation 3"
.TH Mojolicious::Validator::Validation 3 "2016-08-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Validator::Validation \- Perform validations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mojolicious::Validator;
\&  use Mojolicious::Validator::Validation;
\&
\&  my $validator = Mojolicious::Validator\->new;
\&  my $validation
\&    = Mojolicious::Validator::Validation\->new(validator => $validator);
\&  $validation\->input({foo => \*(Aqbar\*(Aq});
\&  $validation\->required(\*(Aqfoo\*(Aq)\->in(\*(Aqbar\*(Aq, \*(Aqbaz\*(Aq);
\&  say $validation\->param(\*(Aqfoo\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Validator::Validation performs Mojolicious::Validator
validation checks.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Validator::Validation implements the following attributes.
.SS "csrf_token"
.IX Subsection "csrf_token"
.Vb 2
\&  my $token   = $validation\->csrf_token;
\&  $validation = $validation\->csrf_token(\*(Aqfa6a08...\*(Aq);
.Ve
.PP
\&\s-1CSRF\s0 token.
.SS "input"
.IX Subsection "input"
.Vb 2
\&  my $input   = $validation\->input;
\&  $validation = $validation\->input({foo => \*(Aqbar\*(Aq, baz => [123, \*(Aqyada\*(Aq]});
.Ve
.PP
Data to be validated.
.SS "output"
.IX Subsection "output"
.Vb 2
\&  my $output  = $validation\->output;
\&  $validation = $validation\->output({foo => \*(Aqbar\*(Aq, baz => [123, \*(Aqyada\*(Aq]});
.Ve
.PP
Validated data.
.SS "topic"
.IX Subsection "topic"
.Vb 2
\&  my $topic   = $validation\->topic;
\&  $validation = $validation\->topic(\*(Aqfoo\*(Aq);
.Ve
.PP
Name of field currently being validated.
.SS "validator"
.IX Subsection "validator"
.Vb 2
\&  my $validator = $validation\->validator;
\&  $validation   = $validation\->validator(Mojolicious::Validator\->new);
.Ve
.PP
Mojolicious::Validator object this validation belongs to.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Validator::Validation inherits all methods from Mojo::Base
and implements the following new ones.
.SS "check"
.IX Subsection "check"
.Vb 1
\&  $validation = $validation\->check(\*(Aqsize\*(Aq, 2, 7);
.Ve
.PP
Perform validation check on all values of the current \*(L"topic\*(R", no more
checks will be performed on them after the first one failed. All checks from
\&\*(L"\s-1CHECKS\s0\*(R" in Mojolicious::Validator are supported.
.SS "csrf_protect"
.IX Subsection "csrf_protect"
.Vb 1
\&  $validation = $validation\->csrf_protect;
.Ve
.PP
Validate \f(CW\*(C`csrf_token\*(C'\fR and protect from cross-site request forgery.
.SS "error"
.IX Subsection "error"
.Vb 3
\&  my $err     = $validation\->error(\*(Aqfoo\*(Aq);
\&  $validation = $validation\->error(foo => [\*(Aqcustom_check\*(Aq]);
\&  $validation = $validation\->error(foo => [$check, $result, @args]);
.Ve
.PP
Get or set details for failed validation check, at any given time there can
only be one per field.
.PP
.Vb 2
\&  # Details about failed validation
\&  my ($check, $result, @args) = @{$validation\->error(\*(Aqfoo\*(Aq)};
.Ve
.SS "every_param"
.IX Subsection "every_param"
.Vb 1
\&  my $values = $validation\->every_param(\*(Aqfoo\*(Aq);
.Ve
.PP
Similar to \*(L"param\*(R", but returns all values sharing the same name as an
array reference.
.PP
.Vb 2
\&  # Get first value
\&  my $first = $validation\->every_param(\*(Aqfoo\*(Aq)\->[0];
.Ve
.SS "failed"
.IX Subsection "failed"
.Vb 1
\&  my $names = $validation\->failed;
.Ve
.PP
Return an array reference with all names for values that failed validation.
.PP
.Vb 2
\&  # Names of all values that failed
\&  say for @{$validation\->failed};
.Ve
.SS "has_data"
.IX Subsection "has_data"
.Vb 1
\&  my $bool = $validation\->has_data;
.Ve
.PP
Check if \*(L"input\*(R" is available for validation.
.SS "has_error"
.IX Subsection "has_error"
.Vb 2
\&  my $bool = $validation\->has_error;
\&  my $bool = $validation\->has_error(\*(Aqfoo\*(Aq);
.Ve
.PP
Check if validation resulted in errors, defaults to checking all fields.
.SS "is_valid"
.IX Subsection "is_valid"
.Vb 2
\&  my $bool = $validation\->is_valid;
\&  my $bool = $validation\->is_valid(\*(Aqfoo\*(Aq);
.Ve
.PP
Check if validation was successful and field has a value, defaults to checking
the current \*(L"topic\*(R".
.SS "optional"
.IX Subsection "optional"
.Vb 2
\&  $validation = $validation\->optional(\*(Aqfoo\*(Aq);
\&  $validation = $validation\->optional(\*(Aqfoo\*(Aq, \*(Aqfilter1\*(Aq, \*(Aqfilter2\*(Aq);
.Ve
.PP
Change validation \*(L"topic\*(R" and apply filters. All filters from
\&\*(L"\s-1FILTERS\s0\*(R" in Mojolicious::Validator are supported.
.PP
.Vb 2
\&  # Trim value and check size
\&  $validation\->optional(\*(Aquser\*(Aq, \*(Aqtrim\*(Aq)\->size(1, 15);
.Ve
.SS "param"
.IX Subsection "param"
.Vb 1
\&  my $value = $validation\->param(\*(Aqfoo\*(Aq);
.Ve
.PP
Access validated values. If there are multiple values sharing the same name, and
you want to access more than just the last one, you can use \*(L"every_param\*(R".
.SS "passed"
.IX Subsection "passed"
.Vb 1
\&  my $names = $validation\->passed;
.Ve
.PP
Return an array reference with all names for values that passed validation.
.PP
.Vb 2
\&  # Names of all values that passed
\&  say for @{$validation\->passed};
.Ve
.SS "required"
.IX Subsection "required"
.Vb 2
\&  $validation = $validation\->required(\*(Aqfoo\*(Aq);
\&  $validation = $validation\->required(\*(Aqfoo\*(Aq, \*(Aqfilter1\*(Aq, \*(Aqfilter2\*(Aq);
.Ve
.PP
Change validation \*(L"topic\*(R", apply filters, and make sure a value is present
and not an empty string. All filters from \*(L"\s-1FILTERS\s0\*(R" in Mojolicious::Validator
are supported.
.PP
.Vb 2
\&  # Trim value and check size
\&  $validation\->required(\*(Aquser\*(Aq, \*(Aqtrim\*(Aq)\->size(1, 15);
.Ve
.SH "AUTOLOAD"
.IX Header "AUTOLOAD"
In addition to the \*(L"\s-1ATTRIBUTES\s0\*(R" and \*(L"\s-1METHODS\s0\*(R" above, you can also call
validation checks provided by \*(L"validator\*(R" on
Mojolicious::Validator::Validation objects, similar to \*(L"check\*(R".
.PP
.Vb 4
\&  # Call validation checks
\&  $validation\->required(\*(Aqfoo\*(Aq)\->size(2, 5)\->like(qr/^[A\-Z]/);
\&  $validation\->optional(\*(Aqbar\*(Aq)\->equal_to(\*(Aqfoo\*(Aq);
\&  $validation\->optional(\*(Aqbaz\*(Aq)\->in(\*(Aqtest\*(Aq, \*(Aq123\*(Aq);
\&
\&  # Longer version
\&  $validation\->required(\*(Aqfoo\*(Aq)\->check(\*(Aqsize\*(Aq, 2, 5)\->check(\*(Aqlike\*(Aq, qr/^[A\-Z]/);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
