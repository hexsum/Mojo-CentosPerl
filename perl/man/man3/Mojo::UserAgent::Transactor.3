.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::UserAgent::Transactor 3"
.TH Mojo::UserAgent::Transactor 3 "2016-10-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::UserAgent::Transactor \- User agent transactor
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::UserAgent::Transactor;
\&
\&  # GET request with Accept header
\&  my $t = Mojo::UserAgent::Transactor\->new;
\&  say $t\->tx(GET => \*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq})\->req\->to_string;
\&
\&  # POST request with form\-data
\&  say $t\->tx(POST => \*(Aqexample.com\*(Aq => form => {a => \*(Aqb\*(Aq})\->req\->to_string;
\&
\&  # PUT request with JSON data
\&  say $t\->tx(PUT => \*(Aqexample.com\*(Aq => json => {a => \*(Aqb\*(Aq})\->req\->to_string;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::UserAgent::Transactor is the transaction building and manipulation
framework used by Mojo::UserAgent.
.SH "GENERATORS"
.IX Header "GENERATORS"
These content generators are available by default.
.SS "form"
.IX Subsection "form"
.Vb 1
\&  $t\->tx(POST => \*(Aqhttp://example.com\*(Aq => form => {a => \*(Aqb\*(Aq});
.Ve
.PP
Generate query string, \f(CW\*(C`application/x\-www\-form\-urlencoded\*(C'\fR or
\&\f(CW\*(C`multipart/form\-data\*(C'\fR content.
.SS "json"
.IX Subsection "json"
.Vb 1
\&  $t\->tx(PATCH => \*(Aqhttp://example.com\*(Aq => json => {a => \*(Aqb\*(Aq});
.Ve
.PP
Generate \s-1JSON\s0 content with Mojo::JSON.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::UserAgent::Transactor implements the following attributes.
.SS "generators"
.IX Subsection "generators"
.Vb 2
\&  my $generators = $t\->generators;
\&  $t             = $t\->generators({foo => sub {...}});
.Ve
.PP
Registered content generators, by default only \f(CW\*(C`form\*(C'\fR and \f(CW\*(C`json\*(C'\fR are already
defined.
.SS "name"
.IX Subsection "name"
.Vb 2
\&  my $name = $t\->name;
\&  $t       = $t\->name(\*(AqMojolicious\*(Aq);
.Ve
.PP
Value for \f(CW\*(C`User\-Agent\*(C'\fR request header of generated transactions, defaults to
\&\f(CW\*(C`Mojolicious (Perl)\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
Mojo::UserAgent::Transactor inherits all methods from Mojo::Base and
implements the following new ones.
.SS "add_generator"
.IX Subsection "add_generator"
.Vb 1
\&  $t = $t\->add_generator(foo => sub {...});
.Ve
.PP
Register a content generator.
.PP
.Vb 4
\&  $t\->add_generator(foo => sub {
\&    my ($t, $tx, @args) = @_;
\&    ...
\&  });
.Ve
.SS "endpoint"
.IX Subsection "endpoint"
.Vb 1
\&  my ($proto, $host, $port) = $t\->endpoint(Mojo::Transaction::HTTP\->new);
.Ve
.PP
Actual endpoint for transaction.
.SS "peer"
.IX Subsection "peer"
.Vb 1
\&  my ($proto, $host, $port) = $t\->peer(Mojo::Transaction::HTTP\->new);
.Ve
.PP
Actual peer for transaction.
.SS "proxy_connect"
.IX Subsection "proxy_connect"
.Vb 1
\&  my $tx = $t\->proxy_connect(Mojo::Transaction::HTTP\->new);
.Ve
.PP
Build Mojo::Transaction::HTTP proxy \f(CW\*(C`CONNECT\*(C'\fR request for transaction if
possible.
.SS "redirect"
.IX Subsection "redirect"
.Vb 1
\&  my $tx = $t\->redirect(Mojo::Transaction::HTTP\->new);
.Ve
.PP
Build Mojo::Transaction::HTTP follow-up request for \f(CW301\fR, \f(CW302\fR, \f(CW303\fR,
\&\f(CW307\fR or \f(CW308\fR redirect response if possible.
.SS "tx"
.IX Subsection "tx"
.Vb 11
\&  my $tx = $t\->tx(GET  => \*(Aqexample.com\*(Aq);
\&  my $tx = $t\->tx(POST => \*(Aqhttp://example.com\*(Aq);
\&  my $tx = $t\->tx(GET  => \*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq});
\&  my $tx = $t\->tx(PUT  => \*(Aqhttp://example.com\*(Aq => \*(AqHi!\*(Aq);
\&  my $tx = $t\->tx(PUT  => \*(Aqhttp://example.com\*(Aq => form => {a => \*(Aqb\*(Aq});
\&  my $tx = $t\->tx(PUT  => \*(Aqhttp://example.com\*(Aq => json => {a => \*(Aqb\*(Aq});
\&  my $tx = $t\->tx(POST => \*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
\&  my $tx = $t\->tx(
\&    PUT => \*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => form => {a => \*(Aqb\*(Aq});
\&  my $tx = $t\->tx(
\&    PUT => \*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => json => {a => \*(Aqb\*(Aq});
.Ve
.PP
Versatile general purpose Mojo::Transaction::HTTP transaction builder for
requests, with support for \*(L"\s-1GENERATORS\s0\*(R".
.PP
.Vb 2
\&  # Generate and inspect custom GET request with DNT header and content
\&  say $t\->tx(GET => \*(Aqexample.com\*(Aq => {DNT => 1} => \*(AqBye!\*(Aq)\->req\->to_string;
\&
\&  # Stream response content to STDOUT
\&  my $tx = $t\->tx(GET => \*(Aqhttp://example.com\*(Aq);
\&  $tx\->res\->content\->unsubscribe(\*(Aqread\*(Aq)\->on(read => sub { say $_[1] });
\&
\&  # PUT request with content streamed from file
\&  my $tx = $t\->tx(PUT => \*(Aqhttp://example.com\*(Aq);
\&  $tx\->req\->content\->asset(Mojo::Asset::File\->new(path => \*(Aq/foo.txt\*(Aq));
.Ve
.PP
The \f(CW\*(C`json\*(C'\fR content generator uses Mojo::JSON for encoding and sets the
content type to \f(CW\*(C`application/json\*(C'\fR.
.PP
.Vb 3
\&  # POST request with "application/json" content
\&  my $tx = $t\->tx(
\&    POST => \*(Aqhttp://example.com\*(Aq => json => {a => \*(Aqb\*(Aq, c => [1, 2, 3]});
.Ve
.PP
The \f(CW\*(C`form\*(C'\fR content generator will automatically use query parameters for
\&\f(CW\*(C`GET\*(C'\fR and \f(CW\*(C`HEAD\*(C'\fR requests.
.PP
.Vb 2
\&  # GET request with query parameters
\&  my $tx = $t\->tx(GET => \*(Aqhttp://example.com\*(Aq => form => {a => \*(Aqb\*(Aq});
.Ve
.PP
For all other request methods the \f(CW\*(C`application/x\-www\-form\-urlencoded\*(C'\fR content
type is used.
.PP
.Vb 3
\&  # POST request with "application/x\-www\-form\-urlencoded" content
\&  my $tx = $t\->tx(
\&    POST => \*(Aqhttp://example.com\*(Aq => form => {a => \*(Aqb\*(Aq, c => \*(Aqd\*(Aq});
.Ve
.PP
Parameters may be encoded with the \f(CW\*(C`charset\*(C'\fR option.
.PP
.Vb 3
\&  # PUT request with Shift_JIS encoded form values
\&  my $tx = $t\->tx(
\&    PUT => \*(Aqexample.com\*(Aq => form => {a => \*(Aqb\*(Aq} => charset => \*(AqShift_JIS\*(Aq);
.Ve
.PP
An array reference can be used for multiple form values sharing the same name.
.PP
.Vb 3
\&  # POST request with form values sharing the same name
\&  my $tx = $t\->tx(
\&    POST => \*(Aqhttp://example.com\*(Aq => form => {a => [\*(Aqb\*(Aq, \*(Aqc\*(Aq, \*(Aqd\*(Aq]});
.Ve
.PP
A hash reference with a \f(CW\*(C`content\*(C'\fR or \f(CW\*(C`file\*(C'\fR value can be used to switch to
the \f(CW\*(C`multipart/form\-data\*(C'\fR content type for file uploads.
.PP
.Vb 3
\&  # POST request with "multipart/form\-data" content
\&  my $tx = $t\->tx(
\&    POST => \*(Aqhttp://example.com\*(Aq => form => {mytext => {content => \*(Aqlala\*(Aq}});
\&
\&  # POST request with multiple files sharing the same name
\&  my $tx = $t\->tx(POST => \*(Aqhttp://example.com\*(Aq =>
\&    form => {mytext => [{content => \*(Aqfirst\*(Aq}, {content => \*(Aqsecond\*(Aq}]});
.Ve
.PP
The \f(CW\*(C`file\*(C'\fR value should contain the path to the file you want to upload or an
asset object, like Mojo::Asset::File or Mojo::Asset::Memory.
.PP
.Vb 3
\&  # POST request with upload streamed from file
\&  my $tx = $t\->tx(
\&    POST => \*(Aqhttp://example.com\*(Aq => form => {mytext => {file => \*(Aq/foo.txt\*(Aq}});
\&
\&  # POST request with upload streamed from asset
\&  my $asset = Mojo::Asset::Memory\->new\->add_chunk(\*(Aqlalala\*(Aq);
\&  my $tx    = $t\->tx(
\&    POST => \*(Aqhttp://example.com\*(Aq => form => {mytext => {file => $asset}});
.Ve
.PP
A \f(CW\*(C`filename\*(C'\fR value will be generated automatically, but can also be set
manually if necessary. All remaining values in the hash reference get merged
into the \f(CW\*(C`multipart/form\-data\*(C'\fR content as headers.
.PP
.Vb 10
\&  # POST request with form values and customized upload (filename and header)
\&  my $tx = $t\->tx(POST => \*(Aqhttp://example.com\*(Aq => form => {
\&    a      => \*(Aqb\*(Aq,
\&    c      => \*(Aqd\*(Aq,
\&    mytext => {
\&      content        => \*(Aqlalala\*(Aq,
\&      filename       => \*(Aqfoo.txt\*(Aq,
\&      \*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq
\&    }
\&  });
.Ve
.PP
The \f(CW\*(C`multipart/form\-data\*(C'\fR content type can also be enforced by setting the
\&\f(CW\*(C`Content\-Type\*(C'\fR header manually.
.PP
.Vb 3
\&  # Force "multipart/form\-data"
\&  my $headers = {\*(AqContent\-Type\*(Aq => \*(Aqmultipart/form\-data\*(Aq};
\&  my $tx = $t\->tx(POST => \*(Aqexample.com\*(Aq => $headers => form => {a => \*(Aqb\*(Aq});
.Ve
.SS "upgrade"
.IX Subsection "upgrade"
.Vb 1
\&  my $tx = $t\->upgrade(Mojo::Transaction::HTTP\->new);
.Ve
.PP
Build Mojo::Transaction::WebSocket follow-up transaction for WebSocket
handshake if possible.
.SS "websocket"
.IX Subsection "websocket"
.Vb 2
\&  my $tx = $t\->websocket(\*(Aqws://example.com\*(Aq);
\&  my $tx = $t\->websocket(\*(Aqws://example.com\*(Aq => {DNT => 1} => [\*(Aqv1.proto\*(Aq]);
.Ve
.PP
Versatile Mojo::Transaction::HTTP transaction builder for WebSocket
handshake requests.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
