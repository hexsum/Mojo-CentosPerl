.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::JSON 3"
.TH Mojo::JSON 3 "2016-07-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::JSON \- Minimalistic JSON
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::JSON qw(decode_json encode_json);
\&
\&  my $bytes = encode_json {foo => [1, 2], bar => \*(Aqhello!\*(Aq, baz => \e1};
\&  my $hash  = decode_json $bytes;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::JSON is a minimalistic and possibly the fastest pure-Perl
implementation of \s-1RFC\s0 7159 <http://tools.ietf.org/html/rfc7159>.
.PP
It supports normal Perl data types like scalar, array reference, hash reference
and will try to call the \f(CW\*(C`TO_JSON\*(C'\fR method on blessed references, or stringify
them if it doesn't exist. Differentiating between strings and numbers in Perl
is hard, depending on how it has been used, a scalar can be both at the same
time. The string value has a higher precedence unless both representations are
equivalent.
.PP
.Vb 2
\&  [1, \-2, 3]     \-> [1, \-2, 3]
\&  {"foo": "bar"} \-> {foo => \*(Aqbar\*(Aq}
.Ve
.PP
Literal names will be translated to and from Mojo::JSON constants or a
similar native Perl value.
.PP
.Vb 3
\&  true  \-> Mojo::JSON\->true
\&  false \-> Mojo::JSON\->false
\&  null  \-> undef
.Ve
.PP
In addition scalar references will be used to generate booleans, based on if
their values are true or false.
.PP
.Vb 2
\&  \e1 \-> true
\&  \e0 \-> false
.Ve
.PP
The two Unicode whitespace characters \f(CW\*(C`u2028\*(C'\fR and \f(CW\*(C`u2029\*(C'\fR will always be
escaped to make \s-1JSONP\s0 easier, and the character \f(CW\*(C`/\*(C'\fR to prevent \s-1XSS\s0 attacks.
.PP
.Vb 1
\&  "\ex{2028}\ex{2029}</script>" \-> "\eu2028\eu2029<\e/script>"
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Mojo::JSON implements the following functions, which can be imported
individually.
.SS "decode_json"
.IX Subsection "decode_json"
.Vb 1
\&  my $value = decode_json $bytes;
.Ve
.PP
Decode \s-1JSON\s0 to Perl value and die if decoding fails.
.SS "encode_json"
.IX Subsection "encode_json"
.Vb 1
\&  my $bytes = encode_json {i => \*(AqX mojolicious\*(Aq};
.Ve
.PP
Encode Perl value to \s-1JSON\s0.
.SS "false"
.IX Subsection "false"
.Vb 1
\&  my $false = false;
.Ve
.PP
False value, used because Perl has no native equivalent.
.SS "from_json"
.IX Subsection "from_json"
.Vb 1
\&  my $value = from_json $chars;
.Ve
.PP
Decode \s-1JSON\s0 text that is not \f(CW\*(C`UTF\-8\*(C'\fR encoded to Perl value and die if decoding
fails.
.SS "j"
.IX Subsection "j"
.Vb 3
\&  my $bytes = j [1, 2, 3];
\&  my $bytes = j {i => \*(AqX mojolicious\*(Aq};
\&  my $value = j $bytes;
.Ve
.PP
Encode Perl data structure (which may only be an array reference or hash
reference) or decode \s-1JSON\s0, an \f(CW\*(C`undef\*(C'\fR return value indicates a bare \f(CW\*(C`null\*(C'\fR or
that decoding failed.
.SS "to_json"
.IX Subsection "to_json"
.Vb 1
\&  my $chars = to_json {i => \*(AqX mojolicious\*(Aq};
.Ve
.PP
Encode Perl value to \s-1JSON\s0 text without \f(CW\*(C`UTF\-8\*(C'\fR encoding it.
.SS "true"
.IX Subsection "true"
.Vb 1
\&  my $true = true;
.Ve
.PP
True value, used because Perl has no native equivalent.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
