.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Lite 3"
.TH Mojolicious::Lite 3 "2016-08-16" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Lite \- Micro real\-time web framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Automatically enables "strict", "warnings", "utf8" and Perl 5.10 features
\&  use Mojolicious::Lite;
\&
\&  # Route with placeholder
\&  get \*(Aq/:foo\*(Aq => sub {
\&    my $c   = shift;
\&    my $foo = $c\->param(\*(Aqfoo\*(Aq);
\&    $c\->render(text => "Hello from $foo.");
\&  };
\&
\&  # Start the Mojolicious command system
\&  app\->start;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Lite is a micro real-time web framework built around
Mojolicious.
.PP
See Mojolicious::Guides::Tutorial for more!
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Mojolicious::Lite implements the following functions, which are
automatically exported.
.SS "any"
.IX Subsection "any"
.Vb 8
\&  my $route = any \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = any \*(Aq/:foo\*(Aq => sub {...} => \*(Aqname\*(Aq;
\&  my $route = any \*(Aq/:foo\*(Aq => {foo => \*(Aqbar\*(Aq} => sub {...};
\&  my $route = any \*(Aq/:foo\*(Aq => [foo => qr/\ew+/] => sub {...};
\&  my $route = any [\*(AqGET\*(Aq, \*(AqPOST\*(Aq] => \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = any [\*(AqGET\*(Aq, \*(AqPOST\*(Aq] => \*(Aq/:foo\*(Aq => [foo => qr/\ew+/] => sub {...};
\&  my $route = any
\&    [\*(AqGET\*(Aq, \*(AqPOST\*(Aq] => \*(Aq/:foo\*(Aq => (agent => qr/Firefox/) => sub {...};
.Ve
.PP
Generate route with \*(L"any\*(R" in Mojolicious::Routes::Route, matching any of the
listed \s-1HTTP\s0 request methods or all. See Mojolicious::Guides::Tutorial and
Mojolicious::Guides::Routing for more information.
.SS "app"
.IX Subsection "app"
.Vb 1
\&  my $app = app;
.Ve
.PP
Returns the Mojolicious::Lite application object, which is a subclass of
Mojolicious.
.PP
.Vb 3
\&  # Use all the available attributes and methods
\&  app\->log\->level(\*(Aqerror\*(Aq);
\&  app\->defaults(foo => \*(Aqbar\*(Aq);
.Ve
.SS "del"
.IX Subsection "del"
.Vb 5
\&  my $route = del \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = del \*(Aq/:foo\*(Aq => sub {...} => \*(Aqname\*(Aq;
\&  my $route = del \*(Aq/:foo\*(Aq => {foo => \*(Aqbar\*(Aq} => sub {...};
\&  my $route = del \*(Aq/:foo\*(Aq => [foo => qr/\ew+/] => sub {...};
\&  my $route = del \*(Aq/:foo\*(Aq => (agent => qr/Firefox/) => sub {...};
.Ve
.PP
Generate route with \*(L"delete\*(R" in Mojolicious::Routes::Route, matching only
\&\f(CW\*(C`DELETE\*(C'\fR requests. See Mojolicious::Guides::Tutorial and
Mojolicious::Guides::Routing for more information.
.SS "get"
.IX Subsection "get"
.Vb 5
\&  my $route = get \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = get \*(Aq/:foo\*(Aq => sub {...} => \*(Aqname\*(Aq;
\&  my $route = get \*(Aq/:foo\*(Aq => {foo => \*(Aqbar\*(Aq} => sub {...};
\&  my $route = get \*(Aq/:foo\*(Aq => [foo => qr/\ew+/] => sub {...};
\&  my $route = get \*(Aq/:foo\*(Aq => (agent => qr/Firefox/) => sub {...};
.Ve
.PP
Generate route with \*(L"get\*(R" in Mojolicious::Routes::Route, matching only \f(CW\*(C`GET\*(C'\fR
requests. See Mojolicious::Guides::Tutorial and
Mojolicious::Guides::Routing for more information.
.SS "group"
.IX Subsection "group"
.Vb 1
\&  group {...};
.Ve
.PP
Start a new route group.
.SS "helper"
.IX Subsection "helper"
.Vb 1
\&  helper foo => sub {...};
.Ve
.PP
Add a new helper with \*(L"helper\*(R" in Mojolicious.
.SS "hook"
.IX Subsection "hook"
.Vb 1
\&  hook after_dispatch => sub {...};
.Ve
.PP
Share code with \*(L"hook\*(R" in Mojolicious.
.SS "options"
.IX Subsection "options"
.Vb 5
\&  my $route = options \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = options \*(Aq/:foo\*(Aq => sub {...} => \*(Aqname\*(Aq;
\&  my $route = options \*(Aq/:foo\*(Aq => {foo => \*(Aqbar\*(Aq} => sub {...};
\&  my $route = options \*(Aq/:foo\*(Aq => [foo => qr/\ew+/] => sub {...};
\&  my $route = options \*(Aq/:foo\*(Aq => (agent => qr/Firefox/) => sub {...};
.Ve
.PP
Generate route with \*(L"options\*(R" in Mojolicious::Routes::Route, matching only
\&\f(CW\*(C`OPTIONS\*(C'\fR requests. See Mojolicious::Guides::Tutorial and
Mojolicious::Guides::Routing for more information.
.SS "patch"
.IX Subsection "patch"
.Vb 5
\&  my $route = patch \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = patch \*(Aq/:foo\*(Aq => sub {...} => \*(Aqname\*(Aq;
\&  my $route = patch \*(Aq/:foo\*(Aq => {foo => \*(Aqbar\*(Aq} => sub {...};
\&  my $route = patch \*(Aq/:foo\*(Aq => [foo => qr/\ew+/] => sub {...};
\&  my $route = patch \*(Aq/:foo\*(Aq => (agent => qr/Firefox/) => sub {...};
.Ve
.PP
Generate route with \*(L"patch\*(R" in Mojolicious::Routes::Route, matching only
\&\f(CW\*(C`PATCH\*(C'\fR requests. See Mojolicious::Guides::Tutorial and
Mojolicious::Guides::Routing for more information.
.SS "plugin"
.IX Subsection "plugin"
.Vb 1
\&  plugin SomePlugin => {foo => 23};
.Ve
.PP
Load a plugin with \*(L"plugin\*(R" in Mojolicious.
.SS "post"
.IX Subsection "post"
.Vb 5
\&  my $route = post \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = post \*(Aq/:foo\*(Aq => sub {...} => \*(Aqname\*(Aq;
\&  my $route = post \*(Aq/:foo\*(Aq => {foo => \*(Aqbar\*(Aq} => sub {...};
\&  my $route = post \*(Aq/:foo\*(Aq => [foo => qr/\ew+/] => sub {...};
\&  my $route = post \*(Aq/:foo\*(Aq => (agent => qr/Firefox/) => sub {...};
.Ve
.PP
Generate route with \*(L"post\*(R" in Mojolicious::Routes::Route, matching only \f(CW\*(C`POST\*(C'\fR
requests. See Mojolicious::Guides::Tutorial and
Mojolicious::Guides::Routing for more information.
.SS "put"
.IX Subsection "put"
.Vb 5
\&  my $route = put \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = put \*(Aq/:foo\*(Aq => sub {...} => \*(Aqname\*(Aq;
\&  my $route = put \*(Aq/:foo\*(Aq => {foo => \*(Aqbar\*(Aq} => sub {...};
\&  my $route = put \*(Aq/:foo\*(Aq => [foo => qr/\ew+/] => sub {...};
\&  my $route = put \*(Aq/:foo\*(Aq => (agent => qr/Firefox/) => sub {...};
.Ve
.PP
Generate route with \*(L"put\*(R" in Mojolicious::Routes::Route, matching only \f(CW\*(C`PUT\*(C'\fR
requests. See Mojolicious::Guides::Tutorial and
Mojolicious::Guides::Routing for more information.
.SS "under"
.IX Subsection "under"
.Vb 6
\&  my $route = under sub {...};
\&  my $route = under \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = under \*(Aq/:foo\*(Aq => {foo => \*(Aqbar\*(Aq};
\&  my $route = under \*(Aq/:foo\*(Aq => [foo => qr/\ew+/];
\&  my $route = under \*(Aq/:foo\*(Aq => (agent => qr/Firefox/);
\&  my $route = under [format => 0];
.Ve
.PP
Generate nested route with \*(L"under\*(R" in Mojolicious::Routes::Route, to which all
following routes are automatically appended. See
Mojolicious::Guides::Tutorial and Mojolicious::Guides::Routing for more
information.
.SS "websocket"
.IX Subsection "websocket"
.Vb 5
\&  my $route = websocket \*(Aq/:foo\*(Aq => sub {...};
\&  my $route = websocket \*(Aq/:foo\*(Aq => sub {...} => \*(Aqname\*(Aq;
\&  my $route = websocket \*(Aq/:foo\*(Aq => {foo => \*(Aqbar\*(Aq} => sub {...};
\&  my $route = websocket \*(Aq/:foo\*(Aq => [foo => qr/\ew+/] => sub {...};
\&  my $route = websocket \*(Aq/:foo\*(Aq => (agent => qr/Firefox/) => sub {...};
.Ve
.PP
Generate route with \*(L"websocket\*(R" in Mojolicious::Routes::Route, matching only
WebSocket handshakes. See Mojolicious::Guides::Tutorial and
Mojolicious::Guides::Routing for more information.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Lite inherits all attributes from Mojolicious.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Lite inherits all methods from Mojolicious.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
